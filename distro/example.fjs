



async function exampleFJS(){

	//  Basic assignmnet.

	const add = (( a, b ) => { return a + b })
	console.log( add( 2, 3 ))


	//  No-argument function.

	const tick = (() => { console.log( 'tick' )})
	tick()


	//  Named function.

	const named1 = () => { console.log( this.name )};


	//  No-argument named function.

	const named2 = () => { console.log( this.name )};


	//  Inline callback.

	[ 1, 2, 3 ]
	.map( (( x ) => { return x * 2 }))


	//  Higher-order + closures.

	const times = (( n, fn ) => { for( let i = 0; i < n; i ++ ) fn( i )})
	times( 3, (( i ) => { console.log( i )}))


	//  Immediately-invoked.

	const msg = ( (( name ) => { return `Hello, ${ name }`}))( 'F-This' )
	console.log( msg )


	//  Default / rest / destructuring params.

	const 
	format = (({ a = 1, b = 2 } = {}) => { return `${ a }:${ b }`}),
	sum = (( ...xs ) => { return xs.reduce( (( s, x ) => s + x), 0 )})
	

	//  Methods and properties.

	const counter = {
	
		n: 0,
		increment: (() => { this.n ++ }),
		get: (() => { return this.n })
	}


	//  Nested braces in bodies.

	const pick = (( obj, keys ) => {
	
		const out = {}
		for( const k of keys ){ if( k in obj ){ out[ k ] = obj[ k ]}}
		return out
	})


	//  Inline promise.

	await ((async () => { return 42 }))()

	
	//  Include promise sans argument parentheses.

	await ((async () => { return 67 }))()


	//  Named inline promise.const doWork = async () => { await new Promise( (( r ) => { setTimeout( r, 10 )}))};
}




//  Purely for JavaScript console comparisonsâ€¦

window.exampleFJS = exampleFJS
console.log( 'exampleFJS', exampleFJS.toString() )




export default exampleFJS